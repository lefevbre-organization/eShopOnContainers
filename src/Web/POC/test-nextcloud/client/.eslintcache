[{"C:\\eShopOnContainers\\src\\Web\\POC\\test-nextcloud\\client\\src\\index.js":"1","C:\\eShopOnContainers\\src\\Web\\POC\\test-nextcloud\\client\\src\\reportWebVitals.js":"2","C:\\eShopOnContainers\\src\\Web\\POC\\test-nextcloud\\client\\src\\App.js":"3","C:\\eShopOnContainers\\src\\Web\\POC\\test-nextcloud\\client\\src\\calendar-api.js":"4","C:\\eShopOnContainers\\src\\Web\\POC\\test-nextcloud\\client\\src\\vendor\\caldavjs-nextcloud\\index.js":"5","C:\\eShopOnContainers\\src\\Web\\POC\\test-nextcloud\\client\\src\\vendor\\caldavjs-nextcloud\\ical-parser.js":"6","C:\\eShopOnContainers\\src\\Web\\POC\\test-nextcloud\\client\\src\\vendor\\caldavjs-nextcloud\\requests.js":"7"},{"size":517,"mtime":1610116267500,"results":"8","hashOfConfig":"9"},{"size":375,"mtime":1610116267501,"results":"10","hashOfConfig":"9"},{"size":2301,"mtime":1610796515251,"results":"11","hashOfConfig":"9"},{"size":2344,"mtime":1611164588655,"results":"12","hashOfConfig":"9"},{"size":11902,"mtime":1610796515252,"results":"13","hashOfConfig":"9"},{"size":2748,"mtime":1610796515252,"results":"14","hashOfConfig":"9"},{"size":2320,"mtime":1610796515253,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1ti9mne",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\eShopOnContainers\\src\\Web\\POC\\test-nextcloud\\client\\src\\index.js",[],["33","34"],"C:\\eShopOnContainers\\src\\Web\\POC\\test-nextcloud\\client\\src\\reportWebVitals.js",[],"C:\\eShopOnContainers\\src\\Web\\POC\\test-nextcloud\\client\\src\\App.js",[],"C:\\eShopOnContainers\\src\\Web\\POC\\test-nextcloud\\client\\src\\calendar-api.js",[],"C:\\eShopOnContainers\\src\\Web\\POC\\test-nextcloud\\client\\src\\vendor\\caldavjs-nextcloud\\index.js",["35"],"\"use strict\";\r\n\r\nimport icalParser from './ical-parser';\r\nimport icalGenerator from 'ical-generator';\r\nimport requests from './requests';\r\nimport xml2js from 'xml2js';\r\nimport needle from 'needle';\r\nimport moment from 'moment';\r\n\r\n/**\r\n * Class contructor to create the CalDav connection \r\n * and expose methods for interaction\r\n * \r\n * @param {Object} settings required\r\n ** @param {string} username required\r\n ** @param {string} password required\r\n ** @param {string} access_token required in place of @username and @passward\r\n ** @param {string} server required \r\n ** @param {string} basePath required\r\n ** @param {string} principalPath required\r\n */\r\nexport default class Caldavjs {\r\n  constructor(settings) {\r\n    this.username = settings.username || null;\r\n    this.password = settings.password || null;\r\n    this.access_token = settings.access_token || null;\r\n    this.server = settings.server || null;\r\n    this.basePath = settings.basePath || null;\r\n    this.principalPath = settings.principalPath || null;\r\n    this.timezone = settings.timezone || null;\r\n    this.parserLogging = settings.parserLogging || true;\r\n    this.unifyTags = (str) => {\r\n      if (!str) return str;\r\n      return str.toLowerCase().replace(/^\\w+:/, '');\r\n    }\r\n    this.XML2JS_OPTIONS = {\r\n      tagNameProcessors: [this.unifyTags],\r\n    };\r\n    this.sendRequest = this.sendRequest.bind(this);\r\n    this.extractData = this.extractData.bind(this);\r\n    this.listEvents = this.listEvents.bind(this);\r\n    this.createCalendar = this.createCalendar.bind(this);\r\n    this.listCalendars = this.listCalendars.bind(this);\r\n    this.deleteCalendar = this.deleteCalendar.bind(this);\r\n    this.getChanges = this.getChanges.bind(this);\r\n    this.createEvent = this.createEvent.bind(this);\r\n    this.deleteEvent = this.deleteEvent.bind(this);\r\n  };\r\n\r\n  async sendRequest(options) {\r\n    let self = this;\r\n    let url = this.server;\r\n    if (this.basePath && options.url.indexOf(this.basePath) < 0) {\r\n      url += this.basePath;\r\n    }\r\n    options.url = url + options.url;\r\n    options.headers = options.headers || {};\r\n    options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/xml; charset=utf-8';\r\n    if (this.access_token) {\r\n      options.headers['Authorization'] = 'Bearer ' + this.access_token;\r\n    } else {\r\n      let auth = this.username + ':' + this.password;\r\n      options.headers['Authorization'] = 'Basic ' + (new Buffer(auth).toString('base64'));\r\n    }\r\n    return needle(options.method, options.url, options.data, {\r\n      parse_response: false,\r\n      headers: options.headers\r\n    }).then(response => {\r\n      const body = response.body;\r\n      if (response.statusCode >= 300) {\r\n        throw new Error(`Status code ${response.statusCode} - ${JSON.stringify(body, undefined, 2)}`);\r\n      }\r\n      return new Promise((resolve, reject) => {\r\n        xml2js.parseString(body, self.XML2JS_OPTIONS, (err, result) => {\r\n          if (err) return reject(err);\r\n          if (!result) return resolve(\"Success\");\r\n          let parsed = (result['multistatus']['response'] || []).map(resp => {\r\n            let obj = {\r\n              href: resp['href'],\r\n            };\r\n            obj.data = resp['propstat'][0]['prop'][0];\r\n            return obj;\r\n          });\r\n          resolve({\r\n            responses: parsed,\r\n            body: result\r\n          });\r\n        });\r\n      });\r\n    }).catch(error => {\r\n      throw new Error(`Error in CalDav fetch: ${error}`);\r\n    });\r\n  }\r\n\r\n  extractData(xmlObj, fields) {\r\n    let dest = {\r\n      href: xmlObj.href[0]\r\n    };\r\n    fields.forEach(field => {\r\n      let from = Array.isArray(field) ? field[0] : field;\r\n      let to = Array.isArray(field) ? field[1] : field.substring(field.indexOf(':') + 1);\r\n      if (xmlObj.data[from]) {\r\n        dest[to] = xmlObj.data[from][0];\r\n        let quoted = (typeof dest[to] === 'string') && dest[to].match(/^\"(.*)\"$/);\r\n        if (quoted) dest[to] = quoted[1];\r\n      }\r\n    })\r\n    return dest;\r\n  }\r\n\r\n\r\n  /**\r\n   * list events from a given calendar filename \r\n   * \r\n   * @param {object} required \r\n   ** @param {string} filename required\r\n   ** @param {string} start\r\n   ** @param {string} end\r\n   *\r\n   * @return {array} items\r\n   ** @return {boolean} allDay\r\n   ** @return {string} etag\r\n   ** @return {string} calendarData\r\n   ** @return {string} start\r\n   ** @return {string} end\r\n   ** @return {string} summary\r\n   ** @return {string} location\r\n   ** @return {string} description\r\n   ** @return {string} color\r\n   ** @return {csv-string} categories\r\n   */\r\n  listEvents(input) {\r\n    let self = this;\r\n    input.start = moment(input.start).format(\"YYYYMMDDTHHmmss\");\r\n    input.end = moment(input.end).format(\"YYYYMMDDTHHmmss\");\r\n    return this.sendRequest({\r\n        url: input.filename,\r\n        method: 'REPORT',\r\n        headers: {\r\n          Depth: 1\r\n        },\r\n        data: requests.listEvents(input),\r\n      })\r\n      .then(events => {\r\n        return events.responses.map(evt => {\r\n          return self.extractData(evt, [\r\n            ['getetag', 'etag'],\r\n            ['calendar-data', 'calendarData']\r\n          ]);\r\n        })\r\n      })\r\n      .then(events => {\r\n        return Promise.all(events.map(evt => {\r\n          return new Promise((resolve, reject) => {\r\n            icalParser.convert(evt.calendarData, this.parserLogging, (err, parsed) => {\r\n              if (err) return reject(err);\r\n              parsed = parsed.VCALENDAR[0].VEVENT[0];\r\n              evt.allDay = (parsed[`DTSTART;TZID=${self.timezone}`] || parsed[`DTSTART;VALUE=DATE`]).length === 8;\r\n              evt.start = parsed[`DTSTART;TZID=${self.timezone}`] || parsed[`DTSTART;VALUE=DATE`];\r\n              evt.end = parsed[`DTEND;TZID=${self.timezone}`] || parsed[`DTEND;VALUE=DATE`];\r\n              evt.summary = parsed.SUMMARY;\r\n              evt.location = parsed.LOCATION;\r\n              evt.description = parsed.DESCRIPTION;\r\n              evt.color = parsed.COLOR;\r\n              evt.categories = parsed.CATEGORIES;\r\n              evt.json = parsed;\r\n              resolve();\r\n            })\r\n          })\r\n        })).then(_ => events);\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Create a new calendar \r\n   * \r\n   * @param {object} required \r\n   ** @param {string} name required\r\n   ** @param {string} timezone override for settings\r\n   ** @param {string} fllename required\r\n   ** @param {string} description \r\n   *\r\n   * @return {string}\r\n   */\r\n  createCalendar(input) {\r\n    let cal = icalGenerator({\r\n      name: input.name,\r\n      timezone: input.timezone || this.timezone,\r\n      color: input.color\r\n    });\r\n\r\n    const calStr = cal.toString().replace(\"END:VCALENDAR\", \"COLOR:RED\\r\\nEND:VCALENDAR\");\r\n    console.log(calStr);\r\n    debugger\r\n\r\n    return this.sendRequest({\r\n        url: input.filename,\r\n        method: 'MKCALENDAR',\r\n        data: requests.createCalendar({\r\n          data: calStr,\r\n          name: input.name,\r\n          description: input.description\r\n        }),\r\n      })\r\n      .then(response => {\r\n        return \"Success\";\r\n      })\r\n  }\r\n\r\n  /**\r\n   * List all calendars at the resource url \r\n   *\r\n   * @return {array} of @return {object} \r\n   ** @return {string} owner\r\n   ** @return {string} displayName\r\n   ** @return {string} ctag\r\n   ** @return {string} syncToken\r\n   */\r\n  listCalendars(input) {\r\n    let self = this;\r\n    return this.sendRequest({\r\n        method: 'PROPFIND',\r\n        url: self.principalPath || '',\r\n        headers: {\r\n          Depth: 0,\r\n        },\r\n        data: requests.principal(),\r\n      })\r\n      .then(principals => {\r\n        let href = principals.responses[0].data['current-user-principal'][0]['href'][0];\r\n        return this.sendRequest({\r\n          method: 'PROPFIND',\r\n          url: href,\r\n          headers: {\r\n            Depth: 0\r\n          },\r\n          data: requests.calendarHome(),\r\n        })\r\n      })\r\n      .then(calhome => {\r\n        let href = calhome.responses[0].data['calendar-home-set'][0]['href'][0];\r\n        return this.sendRequest({\r\n          method: 'PROPFIND',\r\n          url: href,\r\n          headers: {\r\n            Depth: 1\r\n          },\r\n          data: requests.calendarList(),\r\n        })\r\n      })\r\n      .then(calendars => {\r\n        calendars.responses.shift();\r\n        return calendars.responses.map(cal => {\r\n          let obj = self.extractData(cal, ['owner', ['displayname', 'name'],\r\n            ['getctag', 'ctag'],\r\n            ['sync-token', 'syncToken']\r\n          ]);\r\n          if (obj.owner) {\r\n            obj.owner = obj.owner['href'][0];\r\n          }\r\n          return obj;\r\n        });\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Delete the calendar of a given filename \r\n   * \r\n   * @param {object} required \r\n   ** @param {string} filename required\r\n   *\r\n   * @return {string} \r\n   */\r\n  deleteCalendar(input) {\r\n    return this.sendRequest({\r\n      url: input.filename,\r\n      method: 'DELETE',\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get calendar changes since syncToken \r\n   * \r\n   * @param {object} required \r\n   ** @param {string} filename required\r\n   ** @param {string} syncToken required\r\n   *\r\n   * @return {object} \r\n   ** @return {string} syncToken\r\n   ** @return {object} changes\r\n   *** @return {string} href\r\n   *** @return {string} etag\r\n   */\r\n  getChanges(input) {\r\n    let self = this;\r\n    return this.sendRequest({\r\n        url: input.filename,\r\n        method: 'REPORT',\r\n        data: requests.getChanges({\r\n          syncToken: input.syncToken\r\n        }),\r\n      })\r\n      .then(changes => {\r\n        let syncToken = changes.body['multistatus']['sync-token'][0];\r\n        changes = changes.responses.map(change => {\r\n          return self.extractData(change, [\r\n            ['getetag', 'etag']\r\n          ]);\r\n        });\r\n        return {\r\n          changes,\r\n          syncToken\r\n        };\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Create a new event of a given filename \r\n   * \r\n   * @param {object} required \r\n   ** @param {ISODate} start required\r\n   ** @param {ISODate} end required\r\n   ** @param {string} summary required\r\n   ** @param {string} filename required \r\n   ** @param {string} timezone override for settings\r\n   ** @param {object} organizer \r\n   *** @param {string} name \r\n   *** @param {string} email \r\n   *** @param {string} mailto \r\n   *** @param {string} type of @param predefined individual, group, resource, room, unknown \r\n   ** @param {string} location \r\n   ** @param {string} description \r\n   ** @param {string} color \r\n   ** @param {array} categories of @param objects\r\n   *** @param {string} name \r\n   ** @param {object} attendees  @param objects\r\n   *** @param {string} name \r\n   *** @param {string} email \r\n   *** @param {string} mailto \r\n   ** @param {boolean} allDay \r\n   *\r\n   * @return {string}\r\n   */\r\n  createEvent(input) {\r\n    let evt = null;\r\n    try {\r\n      evt = icalGenerator({\r\n        events: [{\r\n          start: new Date(input.start),\r\n          end: new Date(input.end),\r\n          summary: input.summary,\r\n          organizer: input.organizer,\r\n          description: input.description,\r\n          location: input.location,\r\n          timezone: input.timezone || this.timezone,\r\n          categories: input.categories,\r\n          attendees: input.attendees,\r\n          allDay: input.allDay || true\r\n        }]\r\n      });\r\n    } catch (e) {\r\n      throw new Error(e.toString());\r\n    }\r\n    let string = evt.toString();\r\n    string = string.replace('\\nLOCATION', '\\nCOLOR:' + input.color + '\\nLOCATION');\r\n    return this.sendRequest({\r\n      url: input.filename,\r\n      method: 'PUT',\r\n      data: string,\r\n      headers: {\r\n        'Content-Type': 'text/calendar'\r\n      },\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Delete the calendar of a given filename \r\n   * \r\n   * @param {object} required \r\n   ** @param {string} filename required\r\n   *\r\n   * @return {string} \r\n   */\r\n  deleteEvent(input) {\r\n    return this.deleteCalendar(input);\r\n  }\r\n\r\n}\r\n","C:\\eShopOnContainers\\src\\Web\\POC\\test-nextcloud\\client\\src\\vendor\\caldavjs-nextcloud\\ical-parser.js",["36","37","38","39","40","41","42","43"],"'use strict';\r\nvar async = require(\"async\"),\r\n\tReadable = require(\"stream\").Readable,\r\n\treadline = require(\"readline\"),\r\n\tlineReader,\r\n\tstream;\r\n\r\nfunction convert(fileData, logging, callback) {\r\n\tif(typeof callback !== \"function\") {\r\n\t\tthrow new Error(\"iCAL-PARSER: No callback provided. Aborting!!\");\r\n\t\treturn console.error(\"No callback provided. Aborting!!\");\r\n\t}\r\n\r\n\tif(typeof fileData !== \"string\") {\r\n\t\treturn callback(new Error(\"iCAL-PARSER: Invalid file data passed. Aborting!!\"));\r\n\t}\r\n\r\n\tprepare(fileData, logging, callback);\r\n}\r\n\r\nfunction prepare(fileData, logging, callback) {\r\n\tvar _obj = {},\r\n\t\tSPACE = \" \",\r\n\t\tlines = fileData.split(/\\r\\n|\\n|\\r/),\r\n\t\tprevKey = null,\r\n\t\tstartKeys = [],\r\n\t\tobjArr = [],\r\n\t\tendKeys = [];\r\n\r\n\tvar parseLine = function(line, cb) {\r\n\t\tvar keys = line.split(\":\"),\r\n\t\t\tisMultiLine = (line[0] === SPACE),\r\n\t\t\tkey = keys[0],\r\n\t\t\tvalue = keys[1];\r\n\r\n\t\tprevKey = isMultiLine && prevKey || key;\r\n\t\tswitch(key) {\r\n\t\t\tcase \"BEGIN\":\r\n\t\t\t\tif(startKeys.length) {\r\n\t\t\t\t\tobjArr.push(_obj);\r\n\t\t\t\t}\r\n\t\t\t\t_obj = {};\r\n\t\t\t\tstartKeys.push(value);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"END\":\r\n\t\t\t\tendKeys.push(value);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tif(isMultiLine) {\r\n\t\t\t\t\t_obj[prevKey] += line.substring(1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_obj[key] = value;\r\n\t\t\t\t}\r\n\t\t}\r\n\t\tcb();\r\n\t};\r\n\r\n\tasync.each(lines, async.ensureAsync(parseLine), function() {\r\n\t\tif(startKeys.length) {\r\n\t\t\tobjArr.push(_obj);\r\n\t\t}\r\n\t\tprocess(startKeys, endKeys, objArr, logging, callback);\r\n\t});\r\n}\r\n\r\nfunction process(startKeys, endKeys, objArr, logging, callback) {\r\n\tvar result = {},\r\n\t\tlen = startKeys.length,\r\n\t\tstartIdx = -1,\r\n\t\ti = 0;\t\r\n\r\n\t\tif (logging) console.log(\"processing..\");\r\n\tvar iterator = function() {\r\n\t\treturn i < len;\r\n\t};\t\r\n\r\n\tvar iteratee = function(cb) {\t\t\r\n\t\tstartIdx = startKeys.indexOf(endKeys[0]);\r\n\t\tif(startIdx > 0) {\r\n\t\t\ttry {\r\n\t\t\t\tresult = objArr[startIdx - 1];\r\n\r\n\t\t\t\tif(!result.hasOwnProperty(startKeys[startIdx])) {\r\n\t\t\t\t\tresult[startKeys[startIdx]] = [];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult[startKeys[startIdx]].push(objArr[startIdx]);\r\n\t\t\t\tobjArr.splice(startIdx, 1);\r\n\t\t\t\tobjArr[startIdx - 1] = result;\r\n\t\t\t\tstartKeys.splice(startIdx, 1);\r\n\t\t\t\tendKeys.shift();\r\n\r\n\t\t\t} catch(err) {\r\n\t\t\t\tcb(err);\r\n\t\t\t}\r\n\t\t}\t\r\n\t\ti++;\r\n\t\tcb(null);\t\t\t\r\n\t};\r\n\r\n\tvar onComplete = function(err) {\r\n\t\tif(err) {\r\n\t\t\treturn callback(err);\r\n\t\t}\r\n\r\n\t\tresult = {};\r\n\t\tresult[startKeys[0]] = [objArr[0]];\r\n\r\n\t\tif(objArr.length && objArr[0].VEVENT && objArr[0].VEVENT.length) {\r\n\t\t\tif (logging) console.info(\"iCAL-PARSER:\", objArr[0].VEVENT.length, \"events parsed\");\r\n\t\t} else {\r\n\t\t\tif (logging) console.info(\"iCAL-PARSER: 0 events found\");\r\n\t\t}\r\n\t\t\r\n\t\treturn callback(err, result);\r\n\t};\r\n\r\n\tasync.whilst(iterator, iteratee, onComplete);\t\r\n}\r\n\r\nmodule.exports = {\r\n\tconvert: convert\r\n}\r\n","C:\\eShopOnContainers\\src\\Web\\POC\\test-nextcloud\\client\\src\\vendor\\caldavjs-nextcloud\\requests.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":1,"column":1,"nodeType":"50","messageId":"51","endLine":1,"endColumn":14,"fix":"52"},{"ruleId":"48","severity":1,"message":"49","line":1,"column":1,"nodeType":"50","messageId":"51","endLine":1,"endColumn":14,"fix":"53"},{"ruleId":"54","severity":1,"message":"55","line":3,"column":2,"nodeType":"56","messageId":"57","endLine":3,"endColumn":10},{"ruleId":"54","severity":1,"message":"58","line":4,"column":2,"nodeType":"56","messageId":"57","endLine":4,"endColumn":10},{"ruleId":"54","severity":1,"message":"59","line":5,"column":2,"nodeType":"56","messageId":"57","endLine":5,"endColumn":12},{"ruleId":"54","severity":1,"message":"60","line":6,"column":2,"nodeType":"56","messageId":"57","endLine":6,"endColumn":8},{"ruleId":"61","severity":1,"message":"62","line":11,"column":3,"nodeType":"63","messageId":"64","endLine":11,"endColumn":60},{"ruleId":"65","severity":1,"message":"66","line":36,"column":25,"nodeType":"67","messageId":"68","endLine":36,"endColumn":27},{"ruleId":"65","severity":1,"message":"66","line":36,"column":36,"nodeType":"67","messageId":"68","endLine":36,"endColumn":38},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"71","text":"72"},{"range":"73","text":"72"},"no-unused-vars","'Readable' is assigned a value but never used.","Identifier","unusedVar","'readline' is assigned a value but never used.","'lineReader' is defined but never used.","'stream' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation",[0,13],"",[0,13]]